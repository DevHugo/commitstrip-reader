buildscript {
    ext {
        springBootVersion = "1.5.1.RELEASE"
        springRestDocsVersion = '1.0.0.RELEASE'
        gradleDockerVersion = "1.2"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'http://repo.spring.io/libs-snapshot' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
        classpath("se.transmode.gradle:gradle-docker:${gradleDockerVersion}")
    }
}

plugins {
    id "org.asciidoctor.convert" version "1.5.2"
}

group = 'arhenion'

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

jar {
    baseName = "commitstrip-api"
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/") {
        into 'webstatic/docs'
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    okHttpVersion = "3.4.1"
    jsoupVersion = "1.9.2"
    restDocs = "1.1.2.RELEASE"
    jsonPath = "2.2.0"
    mockitoCore = "1.+"
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    //compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-batch"
    compile ("org.springframework.restdocs:spring-restdocs-mockmvc:${restDocs}") {
        exclude group: "com.fasterxml.jackson.core"
    }

    // In-memory database
    compile "mysql:mysql-connector-java"

    // An HTTP & HTTP/2 client for Android and Java applications
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"

    // HTML parser library
    compile "org.jsoup:jsoup:${jsoupVersion}"

    // Gson converter
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.mockito:mockito-core:${mockitoCore}"
    testCompile "com.jayway.jsonpath:json-path:${jsonPath}"
    testCompile "com.jayway.jsonpath:json-path-assert:${jsonPath}"

    // Add the common part
    compile project(':common')
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "src/main/resources/static/"
    dependsOn test
    sourceDir 'src/main/asciidoc'
}

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
        copy {
            from "src/main/resources/notification.properties.example"
            into stageDir
        }
    }
}
