apply plugin: 'com.android.application'

buildscript {
    ext {
        retrolambdaVersion = "3.3.1"
        googlePlayService = "3.0.0"
        dexcountVersion = "0.6.2"
        androidGradlePlugin = "2.4.0-alpha1"
    }
    repositories {
        mavenCentral()
        maven {
            url "http://dl.bintray.com/android/android-tools"
        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${androidGradlePlugin}"
        classpath "me.tatarka:gradle-retrolambda:${retrolambdaVersion}"
        classpath "com.google.gms:google-services:${googlePlayService}"
        classpath "com.getkeepsafe.dexcount:dexcount-gradle-plugin:${dexcountVersion}"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.getkeepsafe.dexcount'

ext {
    ANDROID_DAILY_OVERRIDE = "cb9da603e64cbab0e28d6e08d22cd7a606559dbb"

    daggerVersion = "2.10-rc2"
    retrofitVersion = "2.1.0"
    gsonVersion = "2.1.0"
    converterGsonVersion = "2.1.0"
    firebaseVersion = "10.0.1"
    appIntroVersion = "4.1.0"
    requeryVersion = "1.2.0"
    requeryProcessorVersion = "1.1.0"
    retrolambdaVersion = "2.2.0"
    adapterRxJavaVersion = "2.1.0"
    retrofitRxJavaAdapteurVersion = "1.0.0"
    picassoVersion = "2.5.2"
    okHttpVersion = "3.6.0"
    okHttpLoggingInterceptorVersion = "3.4.1"
    okioVersion = "1.11.0"
    rxJavaVersion = "2.0.0-RC5"
    rxJavaAndroidVersion = "2.0.0-RC1"
    constraintVersion = "1.0.0-beta4"
    likeButtonVersion = "0.2.0"
    tastyToastVersion = "0.1.1"
    butterKnifeVersion = "8.4.0"
    photoViewVersion = "1.3.0"
    jobDispatcherVersion = "0.5.0"
    mockitoCoreVersion = "2.2.24"
    mockWebServerVersion = "3.6.0"
    androidSupportTestVersion = "0.5"
    espressoVersion = "2.2.2"
    leakCanaryVersion = "1.5"
    logLibraryVersion = "4.5.1"
}

android {
    compileSdkVersion project.compileSdkVersion.toInteger()
    buildToolsVersion project.buildToolsVersion

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDir sharedTestDir
        }
        mock {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.commitstrip.commitstripreader"
        targetSdkVersion project.targetSdkVersion.toInteger()
        minSdkVersion project.minSdkVersion.toInteger()
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    productFlavors {
        mock {
            buildConfigField 'String', 'FLAVOR_NAME', '"mock"'
        }
        prod {
            buildConfigField 'String', 'FLAVOR_NAME', '"prod"'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'cglib-license.txt'
        exclude 'asm-license.txt'
        exclude 'org/mockito/internal/matchers/apachecommons/commons-lang-license.txt'
        exclude 'org/mockito/internal/creation/jmock/jmock-license.txt'
        exclude 'mockito-extensions/org.mockito.plugins.MockMaker'
        exclude 'mockito-extensions/org.mockito.plugins.StackTraceCleanerProvider'
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true);
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Who doesn't need lambda !
    retrolambdaConfig "net.orfjackal.retrolambda:retrolambda:${retrolambdaVersion}"

    // Library dependency injection
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Dagger 2: a fast dependency injector for Android and Java
    compile "com.google.dagger:dagger:${daggerVersion}"
    compile "com.google.dagger:dagger-android:${daggerVersion}"
    compile "com.google.dagger:dagger-android-support:${daggerVersion}"
    androidTestAnnotationProcessor "com.google.dagger:dagger:${daggerVersion}"
    compile 'javax.annotation:jsr250-api:1.0'
    compile 'javax.inject:javax.inject:1'

    // Retrofit: A type-safe HTTP client for Android and Java
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${converterGsonVersion}"
    compile("com.squareup.retrofit2:adapter-rxjava:${adapterRxJavaVersion}") {
        exclude group: "io.reactivex.rxjava2", module: "rxjava"
    }
    compile("com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${retrofitRxJavaAdapteurVersion}") {
        exclude group: "io.reactivex.rxjava2", module: "rxjava"
    }

    // Image downloading and caching library
    compile "com.squareup.picasso:picasso:${picassoVersion}"

    // OkHttp: An HTTP & HTTP/2 client for Android and Java applications
    compile "com.squareup.okhttp3:okhttp:${okHttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okHttpLoggingInterceptorVersion}"
    compile "com.squareup.okio:okio:${okioVersion}"

    // Gson: A Java serialization/deserialization library that can convert Java Objects into JSON and back.
    compile "com.google.code.gson:gson:${gsonVersion}"

    // RxJava: a library for composing asynchronous and event-based programs using observable sequences
    compile "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"
    compile("io.reactivex.rxjava2:rxandroid:${rxJavaAndroidVersion}") {
        exclude group: "io.reactivex", module: "rxjava"
    }

    // ORM for local database
    compile "io.requery:requery:${requeryVersion}"
    compile "io.requery:requery-android:${requeryVersion}"
    annotationProcessor "io.requery:requery-processor:${requeryProcessorVersion}"

    // A logger with a small, extensible API which provides utility on top of Android's normal Log class.
    compile "com.jakewharton.timber:timber:${logLibraryVersion}"

    // Android support library
    compile "com.android.support:appcompat-v7:${androidSdkVersionLong}"
    compile "com.android.support:design:${androidSdkVersionLong}"
    compile "com.android.support:support-v4:${androidSdkVersionLong}"
    compile "com.android.support:recyclerview-v7:${androidSdkVersionLong}"
    compile "com.android.support:cardview-v7:${androidSdkVersionLong}"
    compile "com.android.support.constraint:constraint-layout:${constraintVersion}"

    // Animation for the like button
    compile "com.github.jd-alexander:LikeButton:${likeButtonVersion}"

    // Make your native android toast look beautiful.
    compile "com.sdsmdg.tastytoast:tastytoast:${tastyToastVersion}"

    // Field and method binding for Android views
    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterKnifeVersion}"

    // ImageView for Android that supports zooming, by various touch gestures
    compile "com.github.chrisbanes:PhotoView:${photoViewVersion}"

    // SimpleRangeView is custom view component that provides for the selection of a range of
    // discrete values designated by tick marks.
    compile 'com.appyvet:materialrangebar:1.3'

    // Firebase report crash library
    compile "com.google.firebase:firebase-crash:${firebaseVersion}"

    // Firebase notification
    compile "com.google.firebase:firebase-core:${firebaseVersion}"
    compile "com.google.firebase:firebase-messaging:${firebaseVersion}"

    // Firebase JobDispatcher
    compile "com.firebase:firebase-jobdispatcher:${jobDispatcherVersion}"

    // Wouldn't it be nice to run your Android tests directly from inside your IDE?
    testCompile "org.robolectric:robolectric:3.2.2"

    testCompile 'junit:junit:4.12'

    // Mock Library
    testCompile "org.mockito:mockito-core:${mockitoCoreVersion}"
    androidTestCompile "org.mockito:mockito-core:${mockitoCoreVersion}"

    androidTestCompile "com.crittercism.dexmaker:dexmaker:1.4"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:1.4"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:1.4"

    // Mock server
    testCompile("com.squareup.okhttp3:mockwebserver:${mockWebServerVersion}") {
        exclude group: "com.squareup.okhttp3", module: "okhttp"
        exclude group: "com.squareup.okio", module: "okio"
    }

    // Android testing library
    androidTestCompile "com.android.support:support-annotations:${androidSdkVersionLong}"
    androidTestCompile ("com.android.support.test:runner:${androidSupportTestVersion}") {
        exclude module: 'support-annotations'
    }
    androidTestCompile "com.android.support.test:rules:${androidSupportTestVersion}"

    // Espresso, framework for testing ui
    testCompile("com.android.support.test.espresso:espresso-core:${espressoVersion}") {
        exclude module: 'support-annotations'
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${espressoVersion}") {
        exclude module: 'support-annotations'
        exclude module: 'design'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${espressoVersion}"

    // AppIntro: Make a cool intro for your Android app.
    compile "com.github.paolorotolo:appintro:${appIntroVersion}"

    // Leak canary
    debugCompile "com.squareup.leakcanary:leakcanary-android:${leakCanaryVersion}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${leakCanaryVersion}"

    compile 'com.facebook.stetho:stetho:1.4.2'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    compile project(':common')
}

apply plugin: 'com.google.gms.google-services'
